@page "/board"
@using TodoUI.Data
@inject HttpClient Http
@using TodoUI.DI
@inject BoardApi boardapi
@inherits BoardBase
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Board</PageTitle>

<div class="InputContents">

    <h1>Board</h1>

    <label>Name</label>
    <input type="text" @bind="name" />
    <label>Comment</label>
    <input type="text" @bind="comment" />
    <button @onclick="Add">Add</button>
</div>

<br><br><br><br><br>

@if (boardItems is null || IPAddress is null || timeSpan is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var boardItem in boardItems)
    {
        <div class="Board">
    <div class="Info">
        <span class="ID">ID: @boardItem.Id</span>
        <span class="Name">Name: @boardItem.Name</span>
        <span class="IP">IP: @boardItem.Ip</span>
        <span class="Date">Date: @boardItem.Date.ToOffset(timeSpan.Value).ToString("yyyy/MM/dd tt hh:mm")</span>
        @if (@boardItem.IsChange)
                {
                    <span class="IsChange">Edited</span>
                }

                @if (!@boardItem.IsChange)
                {
                    <span class="IsChange">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                }

                @if (IPAddress == boardItem.Ip)
                {
                    <button @onclick="()=> Update(boardItem.Id,boardItem.Name,boardItem.Ip)">Update</button>
                    <button @onclick="()=> Delete(boardItem.Id)">Delete</button>
                }
            </div>
            <br>
            @boardItem.Comment
            <br><br>
        </div>
        <br>
    }
}

@code {
    private BoardItem[]? boardItems;

    private readonly string defaultName = "No Name";
    private string? name;
    private string? comment;

    protected override async Task OnInitializedAsync()
    {
        name = name ?? defaultName;

        comment = null;

        boardItems = await Http.GetFromJsonAsync<BoardItem[]>(boardapi.Url);

        if (boardItems is not null)
        {
            Array.Sort(boardItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    private async Task Add()
    {
        var boardItem = new BoardItem() { Name = name, Ip = IPAddress, Comment = comment };

        await Http.PostAsJsonAsync<BoardItem>(boardapi.Url, boardItem);

        name = name ?? defaultName;
        comment = null;

        boardItems = await Http.GetFromJsonAsync<BoardItem[]>(boardapi.Url);

        if (boardItems is not null)
        {
            Array.Sort(boardItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    public async Task Delete(long Id)
    {
        await Http.DeleteAsync($"{boardapi.Url}/{Id}");

        boardItems = await Http.GetFromJsonAsync<BoardItem[]>(boardapi.Url);

        if (boardItems is not null)
        {
            Array.Sort(boardItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    public async Task Update(long Id, string? names, string ip)
    {
        name = name ?? names ?? defaultName;

        var boardItem = new BoardItem() { Name = name, Ip = ip, Comment = comment };

        await Http.PutAsJsonAsync<BoardItem>($"{boardapi.Url}/{Id}", boardItem);

        comment = null;

        boardItems = await Http.GetFromJsonAsync<BoardItem[]>(boardapi.Url);

        if (boardItems is not null)
        {
            Array.Sort(boardItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }
}
