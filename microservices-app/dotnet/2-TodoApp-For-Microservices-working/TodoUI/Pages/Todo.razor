@page "/"
@page "/todo"
@using TodoUI.Data
@inject HttpClient Http
@using TodoUI.DI
@inject TodoApi todoapi

<PageTitle>TodoUI</PageTitle>

<h1>TodoUI</h1>

<label>Name</label>
<input type="text" @bind="name" />
<label>IsComplete</label>
<input type="checkbox" @onclick="toggle" />
<button @onclick="Add">Add</button>

@if (todoItems is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>IsComplete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todoItem in todoItems)
            {
                <tr>
                    <td>@todoItem.Id</td>
                    <td>@todoItem.Name</td>
                    <td>@todoItem.IsComplete</td>
                    <td><button @onclick="() => Update(todoItem.Id,todoItem.Name)">Update</button></td>
                    <td><button @onclick="()=> Delete(todoItem.Id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private TodoItem[]? todoItems;

    private string? name;
    private bool iscomplete;

    protected override async Task OnInitializedAsync()
    {
        name = null;
        iscomplete = false;
        todoItems = await Http.GetFromJsonAsync<TodoItem[]>(todoapi.Url);

        if (todoItems is not null)
        {
            Array.Sort(todoItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    private void toggle()
    {
        iscomplete = !iscomplete;
    }


    private async Task Add()
    {
        var todoItem = new TodoItem() { Name = name, IsComplete = iscomplete };

        await Http.PostAsJsonAsync<TodoItem>(todoapi.Url, todoItem);

        name = null;

        todoItems = await Http.GetFromJsonAsync<TodoItem[]>(todoapi.Url);

        if (todoItems is not null)
        {
            Array.Sort(todoItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    public async Task Delete(long Id)
    {
        await Http.DeleteAsync($"{todoapi.Url}/{Id}");

        todoItems = await Http.GetFromJsonAsync<TodoItem[]>(todoapi.Url);

        if (todoItems is not null)
        {
            Array.Sort(todoItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }

    public async Task Update(long Id, string? names)
    {
        name = name ?? names;
        var todoItem = new TodoItem() { Id = Id, Name = name, IsComplete = iscomplete };
        await Http.PutAsJsonAsync<TodoItem>($"{todoapi.Url}/{Id}", todoItem);

        name = null;

        todoItems = await Http.GetFromJsonAsync<TodoItem[]>(todoapi.Url);

        if (todoItems is not null)
        {
            Array.Sort(todoItems, (a, b) => ((int)a.Id) - ((int)b.Id));
        }
    }
}